package elog

var (
	version = "1.0.0"
)

// InitFromConfigFile this will init loggers from a config file, support multi file types like yaml, yml, json, toml...
// note that the logger with same name will be replaced with new one
// you can get the sample cfg content from SampleCfg()
func InitFromCfgFile(path string) {

	cfgs := readCfgFromFile(path)

	initDfLogger(&dfCfg)

	for name, cfg := range cfgs.Cfgs {
		NewLogger(name, cfg)
	}
}

func SampleCfgStr() string {
	return sampleCfg
}

// GenDfCfg - returned a new dfCfg, it will always be the same
func GenDfCfg(name string) *Cfg {
	return genDfCfg().Clone(name)
}

// DfCfg - return the dfCfg, note: dfCfg can be changed by init operations 
func DfCfg() Cfg {
	return dfCfg
}

// NewLogger generator a new Elogger
func NewLogger(name string, cfg* Cfg) *Elogger {
	return newElogger(name, cfg)
}

// SysLogger - returns the internal syslogger, you can using this to make Elog to logout before init logger operations
//   - SysLogger do not write to file in default
func SysLogger() *Elogger {
	return syslogger
}

// Logger - get a logger by name
//  - no name passed, it returned default logger
//  - passed > 1, return the first match, and "" represent to default logger(lowest priority)
//  - if not found, return nil
func Logger(name ...string) *Elogger {
	return getLogger(name...)
}

// Opt - gen a new empty option to set properties in cfg which you want to change
func Opt() *option {
	return newOpt()
}

// Log - get a Elog instance by a logger
//   - Elog is a typedef of *zap.SugaredLogger, so you can use Named() to set tags
//   - every call will create a new instance, recommend cache it first and then use it
func (l *Elogger)Log(opts ...*option) Elog {
	return l.getLog(opts...)
}

// return the Cfg of logger
func (l *Elogger)Cfg() *Cfg {
	return l.cfg.Clone(l.cfg.name)
}

// return the name of logger
func (l *Elogger)Name() string {
	return l.cfg.name
}

// Log - get a log generated by dfLogger
// the passed in option have high priority, if no options passed, it returned a default Elog
func Log(opts ...*option) Elog {
	return dfLogger.Log(opts...)
}

func Version() string{
	return version
}